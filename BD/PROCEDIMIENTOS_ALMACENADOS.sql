#USAR LA BD PARA LA CREACION
USE MAIPO_GRANDE;
#ELIMINAR PROCEDIMIENTOS EXISTENTES

#CREACION DE PROCEDIMIENTOS

#PROCEDIMIENTO DE CREACION DE USUARIOS
DROP PROCEDURE IF EXISTS SP_CREATE_USUARIO;
DELIMITER //
CREATE PROCEDURE SP_CREATE_USUARIO(
IN $NOMBRE VARCHAR(100),
IN $APELLIDO VARCHAR(100),
IN $RUT INT(8),
IN $DV CHAR(1),
IN $COMUNA INT,
IN $CODIGO_POSTAL INT,
IN $CORREO VARCHAR(100),
IN $CONTRASENA VARCHAR(250),
IN $TELEFONO INT(11),
IN $ID_TIPO_PERSONA INT(11),
IN $NOMBRE_FANTASIA VARCHAR(100),
IN $ID_PERFIL INT(11))
BEGIN
	DECLARE $ID_USUARIO INT;
	#SE CREA NUEVO USUARIO
    INSERT INTO `maipo_grande`.`usuario`
	(`CORREO`,
	`CONTRASENA`,
	`ID_PERFIL`)
	VALUES
	($CORREO,
	$CONTRASENA,
	$ID_PERFIL); 
	#SE OBTIENE ID DE USUARIO CREADO
    SELECT MAX(ID_USUARIO) INTO $ID_USUARIO FROM `maipo_grande`.`usuario`;
    #SE INSERTAN DATOS DE PERSONA, CON EL ID DE USUARIO OBTENIDO
    INSERT INTO `maipo_grande`.`persona`
	(`ID_USUARIO`,
	`RUT`,
	`DIGITO_VERIFICADOR`,
	`NOMBRE`,
	`APELLIDO`,
	`NOMBRE_FANTASIA`,
	`CODIGO_POSTAL`,
	`ID_COMUNA`,
	`TELEFONO`,
	`ID_TIPO_PERSONA_LEGAL`)
	VALUES
	($ID_USUARIO,
	$RUT,
	$DV,
	$NOMBRE,
	$APELLIDO,
	$NOMBRE_FANTASIA,
	$CODIGO_POSTAL,
	$COMUNA,
	$TELEFONO,
	$ID_TIPO_PERSONA);
	IF ($ID_PERFIL = 2 || $ID_PERFIL = 5) THEN  
		INSERT INTO `maipo_grande`.`contrato`
		(`ID_USUARIO`,
		`CONTRATO`,
		`FECHA_FIRMA`,
		`FECHA_VENCIMIENTO`)
		VALUES
		($ID_USUARIO,
		NULL,
		SYSDATE(),
		SYSDATE() + INTERVAL 1 YEAR);
	END IF;
END //
DELIMITER ;

#PROCEDIMIENTO PARA TRAER COMUNAS
DROP PROCEDURE IF EXISTS SP_GET_COMUNAS;
DELIMITER //
CREATE PROCEDURE SP_GET_COMUNAS()
BEGIN
SELECT ID_COMUNA ID, ID_CIUDAD CIUDAD, NOMBRE NOMBRECOMUNA FROM COMUNA;
END //
DELIMITER ;

#PROCEDIMIENTO PARA INSERTAR COMPRA DESDE CARRO DE COMPRAS
DROP PROCEDURE IF EXISTS SP_CREATE_PEDIDO_NACIONAL;
DELIMITER //
CREATE PROCEDURE SP_CREATE_PEDIDO_NACIONAL(
	IN $CORREO VARCHAR(100),
    IN $JSON VARCHAR(65535),
    OUT $RESULTADO INT
)
BEGIN
	DECLARE $ID_USUARIO_COMPRADOR INT;
    DECLARE $ID_USUARIO_PROVEEDOR INT;
    DECLARE $CORREO_VENDEDOR VARCHAR(100);
	DECLARE $ID_PEDIDO INT;
	DECLARE $ID_TIPO_FRUTA INT;
	DECLARE $ID_CALIDAD INT;
	DECLARE $COUNTER INT;
	DECLARE $PRECIO FLOAT(9,2);
	DECLARE $CANTIDAD FLOAT(9,2); 
    DECLARE $CANTIDAD_ORIGINAL FLOAT(9,2); 
    DECLARE $NOMBRE_FRUTA VARCHAR(100);
    DECLARE $NOMBRE_CALIDAD VARCHAR(100);
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
		SET $RESULTADO = NULL;
		ROLLBACK;
    END;
    START TRANSACTION;
		#SE OBTIENE EL ID DEL USUARIO COMPRADOR
        SELECT ID_USUARIO INTO $ID_USUARIO_COMPRADOR FROM USUARIO WHERE CORREO = $CORREO;
		#SE CREA EL NUEVO PEDIDO NACIONAL
		INSERT INTO `maipo_grande`.`pedido`(`ID_COMPRADOR`,`ID_TIPO_PEDIDO`,`ID_ESTADO_PEDIDO`,`FECHA_CREACION`,`FECHA_LIMITE_O_RETIRO`,`FECHA_PAGO`)VALUES($ID_USUARIO_COMPRADOR,1,3,SYSDATE(),null,null);
		#SE OBTIENE ID DEL PEDIDO CREADO
		SELECT MAX(ID_PEDIDO) INTO $ID_PEDIDO FROM `maipo_grande`.`pedido`;
		#SE INSERTAN PEDIDOS DEL CARRO
		SET $COUNTER = 1;
		insertDetalle: LOOP
			IF $COUNTER > JSON_LENGTH($JSON) THEN 
				LEAVE insertDetalle;
			END IF;
			select HS.ID_TIPO_FRUTA,HS.ID_CALIDAD,replace(JSON_EXTRACT($JSON, CONCAT('$.',$counter,'.cantidad')),'"',''),CANT_KG,HS.PRECIO_X_KG, TF.NOMBRE, C.NOMBRE, U.CORREO, HS.ID_PROVEEDOR
				INTO $ID_TIPO_FRUTA,$ID_CALIDAD,$CANTIDAD,$CANTIDAD_ORIGINAL,$PRECIO,$NOMBRE_FRUTA,$NOMBRE_CALIDAD,$CORREO_VENDEDOR, $ID_USUARIO_PROVEEDOR
				FROM HISTORICO_STOCK HS
                JOIN TIPO_FRUTA TF ON TF.ID_TIPO_FRUTA = HS.ID_TIPO_FRUTA
                JOIN CALIDAD C ON C.ID_CALIDAD = HS.ID_CALIDAD
                JOIN USUARIO U ON U.ID_USUARIO = HS.ID_PROVEEDOR
				WHERE HS.ID_STOCK =(replace(JSON_EXTRACT($JSON, CONCAT('$.',$counter,'.id')),'"',''));
			INSERT INTO `maipo_grande`.`detalle_pedido`(`ID_PEDIDO`,`ID_VENDEDOR`,`ID_TIPO_FRUTA`,`ID_CALIDAD`,`CANT_KG`,`PRECIO_KG`,`COD_MONEDA`)VALUES($ID_PEDIDO,$ID_USUARIO_PROVEEDOR,$ID_TIPO_FRUTA,$ID_CALIDAD,$CANTIDAD,$PRECIO,'CLP');
            INSERT INTO `maipo_grande`.`historico_stock`(`ID_PROVEEDOR`,`ID_TIPO_FRUTA`,`ID_CALIDAD`,`FECHA_REGISTRO`,`CANT_KG`,`PRECIO_X_KG`)VALUES($ID_USUARIO_PROVEEDOR,$ID_TIPO_FRUTA,$ID_CALIDAD,SYSDATE(),($CANTIDAD_ORIGINAL-$CANTIDAD),$PRECIO);
            INSERT INTO `maipo_grande`.`historico_transacciones`(`FECHA_TRANSACCION`,`CORREO_COMPRADOR`,`CORREO_VENDEDOR`,`NOMBRE_FRUTA`,`TIPO_CALIDAD`,`SUBTOTAL_TRANSACCION`)VALUES(sysdate(),$CORREO,$CORREO_VENDEDOR,$NOMBRE_FRUTA,$NOMBRE_CALIDAD,($PRECIO*$CANTIDAD));
			SET $COUNTER = $COUNTER+1;
		END LOOP insertDetalle;
        SET $RESULTADO = $ID_PEDIDO;
        COMMIT;
END //
DELIMITER ;

#PROCEDIMIENTO PARA INSERTAR COMPRA DESDE CARRO DE COMPRAS
DROP PROCEDURE IF EXISTS SP_CREATE_PEDIDO_EXTRANJERO;
DELIMITER //
CREATE PROCEDURE SP_CREATE_PEDIDO_EXTRANJERO(
	IN $CORREO VARCHAR(100),
    IN $JSON VARCHAR(65535),
    OUT $RESULTADO INT
)
BEGIN
	DECLARE $ID_USUARIO INT;
	DECLARE $ID_PEDIDO INT;
	DECLARE $ID_TIPO_FRUTA INT;
	DECLARE $ID_CALIDAD INT;
	DECLARE $COUNTER INT;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
		SET $RESULTADO = NULL;
		ROLLBACK;
    END;
    START TRANSACTION;
		#SE OBTIENE EL ID DEL USUARIO
        SELECT ID_USUARIO INTO $ID_USUARIO FROM USUARIO WHERE CORREO = $CORREO;
		#SE CREA EL NUEVO PEDIDO NACIONAL
		INSERT INTO `maipo_grande`.`pedido`(`ID_COMPRADOR`,`ID_TIPO_PEDIDO`,`ID_ESTADO_PEDIDO`,`FECHA_CREACION`,`FECHA_LIMITE_O_RETIRO`,`FECHA_PAGO`)VALUES($ID_USUARIO,2,1,SYSDATE(),null,null);
		#SE OBTIENE ID DEL PEDIDO CREADO
		SELECT MAX(ID_PEDIDO) INTO $ID_PEDIDO FROM `maipo_grande`.`pedido`;
		#SE INSERTAN PEDIDOS DEL CARRO
		SET $COUNTER = 1;
		insertDetalle: LOOP
			IF $COUNTER > JSON_LENGTH($JSON) THEN 
				LEAVE insertDetalle;
			END IF;
			SELECT TF.ID_TIPO_FRUTA, C.ID_CALIDAD
			INTO $ID_TIPO_FRUTA,$ID_CALIDAD
			FROM TIPO_FRUTA TF,CALIDAD C
            WHERE TF.NOMBRE = replace(JSON_EXTRACT($JSON, CONCAT('$.',$counter,'.tipo_fruta')),'"','')
            AND C.NOMBRE = replace(JSON_EXTRACT($JSON, CONCAT('$.',$counter,'.calidad')),'"','');
			INSERT INTO `maipo_grande`.`detalle_pedido`(`ID_PEDIDO`,`ID_TIPO_FRUTA`,`METODO_VIAJE`,`REFRIGERADO`,`ID_CALIDAD`,`CANT_KG`,`PRECIO_KG`,`COD_MONEDA`)VALUES($ID_PEDIDO,$ID_TIPO_FRUTA,replace(JSON_EXTRACT($JSON, CONCAT('$.',$counter,'.metodo_viaje')),'"',''),replace(JSON_EXTRACT($JSON, CONCAT('$.',$counter,'.refrigerado')),'"',''),$ID_CALIDAD,replace(JSON_EXTRACT($JSON, CONCAT('$.',$counter,'.cantidad')),'"',''),NULL,'CLP');
			SET $COUNTER = $COUNTER+1;
		END LOOP insertDetalle;
        SET $RESULTADO = $ID_PEDIDO;
        COMMIT;
END //
DELIMITER ;

#PROCEDIMIENTO PARA INSERTAR UNA NUEVA POSTULACION A VENTA EXTRANJERA
DROP PROCEDURE IF EXISTS SP_CREATE_POSTULACION_VENDEDOR;
DELIMITER //
CREATE PROCEDURE SP_CREATE_POSTULACION_VENDEDOR(
	IN $ID_DETALLE_PEDIDO INT,
	IN $CORREO_PROVEEDOR VARCHAR(100),
	IN $TIPO_FRUTA VARCHAR(100),
    IN $CALIDAD VARCHAR(100),
    IN $CANTIDAD FLOAT(6,3),
    IN $PRECIO FLOAT(9,2),
    OUT $RESULTADO INT
)
BEGIN
	DECLARE $ID_USUARIO INT;
    DECLARE $PERFIL VARCHAR(100);
	DECLARE $ID_TIPO_FRUTA INT;
	DECLARE $ID_CALIDAD INT;
    DECLARE $TIPO_POSTULACION INT;
    DECLARE $ID_ESTADO INT;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
		SET $RESULTADO = NULL;
		ROLLBACK;
    END;
    START TRANSACTION;
		#SE OBTIENE EL ID DEL USUARIO
        SELECT ID_USUARIO,P.NOMBRE INTO $ID_USUARIO,$PERFIL FROM USUARIO U JOIN PERFIL P ON P.ID_PERFIL = U.ID_PERFIL WHERE CORREO = $CORREO_PROVEEDOR;
        #SE OBTIENE ID DE TIPO DE FRUTA
        SELECT ID_TIPO_FRUTA INTO $ID_TIPO_FRUTA FROM `maipo_grande`.`tipo_fruta` WHERE NOMBRE = $TIPO_FRUTA;
        #SE OBTIENE ID DE CALIDAD
        SELECT ID_CALIDAD INTO $CALIDAD FROM `maipo_grande`.`calidad` WHERE NOMBRE = $CALIDAD;
        #SE OBTIENE ID DE ESTADO
        SELECT ID_ESTADO INTO $ID_ESTADO FROM `maipo_grande`.`estados` WHERE NOMBRE = 'POSTULADO';
        #SE SELECCIONA EL TIPO DE POSTULACION SEGUN EL TIPO DE PERFIL
        IF($PERFIL = 'Vendedor') THEN
			SET $TIPO_POSTULACION = 1;
        ELSEIF($PERFIL = 'Transportista') THEN
			SET $TIPO_POSTULACION = 2;
		END IF;
        #SE INSERTA EL NUEVO PEDIDO CON ESTADO INICIAL
		INSERT INTO `maipo_grande`.`postulacion` (ID_DETALLE_PEDIDO,ID_TIPO_POSTULACION,ID_USUARIO,ID_ESTADO,KG_APORTADOS,PRECIO)
        VALUES
        ($ID_DETALLE_PEDIDO,$TIPO_POSTULACION,$ID_USUARIO,$ID_ESTADO,$CANTIDAD,$PRECIO);
        #OBTENER ID DE POSTULACION GENERADOS
        SELECT MAX(ID_POSTULACION) INTO $RESULTADO FROM `maipo_grande`.`postulacion`;
        COMMIT;
END //
DELIMITER ;

#PROCEDIMIENTO PARA FINALIZAR PEDIDO POR PARTE DE CLIENTE EXTRANJERO
DROP PROCEDURE IF EXISTS SP_UPDATE_FINALIZAR_PEDIDO;
DELIMITER //
CREATE PROCEDURE SP_UPDATE_FINALIZAR_PEDIDO(
	IN $ID_PEDIDO INT,
    IN $ACCION VARCHAR(10),
    OUT $RESULTADO INT
)
BEGIN
	DECLARE $ESTADO INT;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
		SET $RESULTADO = NULL;
		ROLLBACK;
    END;
    START TRANSACTION;
		SELECT ID_ESTADO INTO $ESTADO 
        FROM ESTADOS
        WHERE NOMBRE = $ACCION;
		UPDATE `maipo_grande`.`pedido`
		SET
		`ID_ESTADO_PEDIDO` = $ESTADO
		WHERE `ID_PEDIDO` = $ID_PEDIDO;
        SET $RESULTADO = $ACCION;
        COMMIT;
END //
DELIMITER ;

#PROCEDIMIENTO CON OFERTAS PARA CATALOGO, SEGUN ROL
DROP PROCEDURE IF EXISTS SP_GET_CATALOGO;
DELIMITER //
CREATE PROCEDURE SP_GET_CATALOGO()
BEGIN
	SELECT 
	CONCAT(PU.NOMBRE,' ',PU.APELLIDO) NOMBRE_VENDEDOR,
	TF.NOMBRE TIPO_FRUTA,
	C.NOMBRE CALIDAD,
	DP.CANT_KG,
	P.FECHA_CREACION ,
    TF.FOTO FOTO,
    DP.PRECIO_KG PRECIO,
    DP.COD_MONEDA MONEDA,
    P.ID_PEDIDO ID
	FROM PEDIDO P
	JOIN PERSONA PU ON PU.ID_USUARIO=P.ID_COMPRADOR
	JOIN DETALLE_PEDIDO DP ON P.ID_PEDIDO=DP.ID_PEDIDO
	JOIN CALIDAD C ON C.ID_CALIDAD=DP.ID_CALIDAD
	JOIN TIPO_FRUTA TF ON TF.ID_TIPO_FRUTA=DP.ID_TIPO_FRUTA
	WHERE ID_ESTADO_PEDIDO IN (2);
END //
DELIMITER ;

#PROCEDIMIENTO CON TIPOS DE FRUTA
DROP PROCEDURE IF EXISTS SP_GET_TIPO_FRUTA;
DELIMITER //
CREATE PROCEDURE SP_GET_TIPO_FRUTA()
BEGIN
	SELECT 
    ID_TIPO_FRUTA, NOMBRE TIPO_FRUTA, DESCRIPCION
	FROM TIPO_FRUTA TF;
END //
DELIMITER ;

#PROCEDIMIENTO CON TIPOS DE CALIDAD
DROP PROCEDURE IF EXISTS SP_GET_CALIDAD;
DELIMITER //
CREATE PROCEDURE SP_GET_CALIDAD()
BEGIN
	SELECT 
    ID_CALIDAD, NOMBRE CALIDAD
	FROM calidad TF;
END //
DELIMITER ;


#PROCEDIMIENTO PARA ELIMINAR USUARIO
DROP PROCEDURE IF EXISTS SP_DELETE_USUARIO;
DELIMITER //
CREATE PROCEDURE SP_DELETE_USUARIO($RUT VARCHAR(8))
BEGIN
	DECLARE $ID_USUARIO INT;
    DECLARE $ID_PEDIDO INT;
	#SE RECUPERA ID DEL USUARIO
    SELECT 
    ID_USUARIO INTO $ID_USUARIO
	FROM PERSONA
    WHERE RUT = $RUT;
    #SE ELMINA DATOS DE PERSONA DEL USUARIO
    #SE RECUPERA EL ID DE LOS PEDIDOS ASOCIADOS AL USUARIO
	SELECT
    ID_PEDIDO INTO $ID_PEDIDO
    FROM PEDIDO
    WHERE ID_COMPRADOR = $ID_USUARIO;
    #SE ELIMINAN LOS PEDIDOS ASOCIADOS AL USUARIO
    DELETE
    FROM DETALLE_PEDIDO
    WHERE ID_PEDIDO = $ID_PEDIDO;
    DELETE
    FROM PEDIDO
    WHERE ID_COMPRADOR = $ID_USUARIO;
	#SE ELIMINAN LOS DESPACHOS ASOCIADOS AL USUARIO, SI ES TRANSPORTISTA
	DELETE
    FROM DESPACHO
    WHERE ID_TRANSPORTISTA = $ID_USUARIO;
    DELETE
    #SE ELIMINA LA PERSONA ASOCIADA AL USUARIO
    FROM PERSONA
    WHERE ID_USUARIO = $ID_USUARIO;
    #SE ELIMINA USUARIO
	DELETE
    FROM USUARIO
    WHERE ID_USUARIO = $ID_USUARIO;
	#SE ELIMINA CONTRATO DE USUARIO
    DELETE
    FROM CONTRATO
    WHERE ID_USUARIO = $ID_USUARIO;
END //
DELIMITER ;


#PROCEDIMIENTO PARA MODIFICAR USUARIO
DROP PROCEDURE IF EXISTS SP_UPDATE_USUARIO;
DELIMITER //
CREATE PROCEDURE `SP_UPDATE_USUARIO`(
$NOMBRE VARCHAR(100),
$APELLIDO VARCHAR(100),
$RUT INT(8),
$TIPO_PERFIL INT,
$TIPO_PERSONA INT,
$NOMBRE_FANTASIA VARCHAR(100),
$COMUNA INT,
$CODIGO_POSTAL INT,
$TELEFONO INT

)
BEGIN
	DECLARE $ID_USUARIO INT;
    SELECT
    ID_USUARIO INTO $ID_USUARIO
    FROM PERSONA
    WHERE RUT=$RUT;
    
    UPDATE PERSONA SET
    NOMBRE = $NOMBRE,
    APELLIDO = $APELLIDO,
    NOMBRE_FANTASIA = $NOMBRE_FANTASIA,
    CODIGO_POSTAL = $CODIGO_POSTAL,
    ID_COMUNA = $COMUNA,
    TELEFONO = $TELEFONO,
    ID_TIPO_PERSONA_LEGAL = $TIPO_PERSONA
    WHERE ID_USUARIO = $ID_USUARIO;
END //
DELIMITER ;

##CREAR PRODUCTO TIPO FRUTA
DROP PROCEDURE IF EXISTS SP_CREATE_TIPO_FRUTA;
DELIMITER //
CREATE PROCEDURE `SP_CREATE_TIPO_FRUTA`(
IN $NOMBRE VARCHAR(100),
IN $DESCRIPCION VARCHAR(150),
IN $FOTO BLOB)
BEGIN
INSERT INTO `maipo_grande`.`tipo_fruta`
	(`NOMBRE`,
	`DESCRIPCION`,
	`FOTO`)
    VALUES
    ($NOMBRE,
    $DESCRIPCION,
    $FOTO);
END //
DELIMITER ;

##ELIMINAR PRODUCTO TIPO FRUTA
DROP PROCEDURE IF EXISTS SP_DELETE_TIPO_FRUTA;
DELIMITER //
CREATE PROCEDURE `SP_DELETE_TIPO_FRUTA`($ID_TIPO_FRUTA INT)
BEGIN
DELETE FROM TIPO_FRUTA WHERE ID_TIPO_FRUTA = $ID_TIPO_FRUTA;
#SE ELIMINAN LAS PUBLICACIONES NACIONALES ASOCIADAS A ESE TIPO DE FRUTA
DELETE FROM HISTORICO_STOCK WHERE ID_TIPO_FRUTA = $ID_TIPO_FRUTA;

#SE ELIMINA EL DETALLE DE PEDIDOS INTERNACIONALES ASOCIADOS AL TIPO DE FRUTA ELIMINADO
DELETE FROM DETALLE_PEDIDO WHERE ID_TIPO_FRUTA = $ID_TIPO_FRUTA;
END //
DELIMITER ;

##ACTUALIZAR PRODUCTO TIPO FRUTA
DROP PROCEDURE IF EXISTS SP_UPDATE_TIPO_FRUTA;
DELIMITER //
CREATE PROCEDURE `SP_UPDATE_TIPO_FRUTA`(
$ID_TIPO_FRUTA INT,
$NOMBRE VARCHAR(100),
$DESCRIPCION VARCHAR(150),
$FOTO BLOB)
BEGIN

    UPDATE TIPO_FRUTA 
    SET
    NOMBRE = $NOMBRE,
    DESCRIPCION = $DESCRIPCION,
    FOTO = $FOTO
    WHERE ID_TIPO_FRUTA = $ID_TIPO_FRUTA;
END //
DELIMITER ;

##LISTAR USUARIOS
DROP PROCEDURE IF EXISTS SP_GET_USUARIO;
DELIMITER //
CREATE PROCEDURE `SP_GET_USUARIO`()
BEGIN
SELECT U.ID_USUARIO ID_USUARIO,P.RUT,P.DIGITO_VERIFICADOR,P.NOMBRE,P.APELLIDO,P.TELEFONO,P.ID_TIPO_PERSONA_LEGAL,P.NOMBRE_FANTASIA,
P.CODIGO_POSTAL,P.ID_COMUNA,U.CORREO,U.ID_PERFIL FROM PERSONA P 
JOIN USUARIO U on U.ID_USUARIO = P.ID_USUARIO
ORDER BY U.ID_USUARIO ;
END //
DELIMITER ;


#CREAR VENTA INTERNA
DROP PROCEDURE IF EXISTS SP_CREAR_VENTA_INTERNA;
DELIMITER //
CREATE PROCEDURE `SP_CREAR_VENTA_INTERNA`(
IN $ID_PROVEEDOR INT,
IN $ID_TIPO_FRUTA INT,
IN $ID_CALIDAD INT,
IN $CANT_KG float(6,3),
IN $PRECIO_X_KG float(9,3))
BEGIN
INSERT INTO HISTORICO_STOCK(ID_PROVEEDOR,ID_TIPO_FRUTA,ID_CALIDAD,FECHA_REGISTRO,CANT_KG,PRECIO_X_KG)
VALUES($ID_PROVEEDOR, 
$ID_TIPO_FRUTA, 
$ID_CALIDAD, 
SYSDATE(), 
$CANT_KG, 
$PRECIO_X_KG);
END //
DELIMITER ;


#TRAER USUARIOS CON CONTRATO
DROP PROCEDURE IF EXISTS SP_GET_USUARIOS_CON_CONTRATO;
DELIMITER //
CREATE PROCEDURE `SP_GET_USUARIOS_CON_CONTRATO` ()
BEGIN
SELECT ID_USUARIO, CORREO, ID_PERFIL FROM USUARIO WHERE ID_PERFIL = 2 OR ID_PERFIL = 5;
END //
DELIMITER ;

#MODIFICAR CONTRATO
DROP PROCEDURE IF EXISTS SP_UPDATE_CONTRATO;
DELIMITER //
CREATE PROCEDURE `SP_UPDATE_CONTRATO`(
$ID_USUARIO INT,
$CONTRATO BLOB,
$FECHA_VENCIMIENTO DATE)
BEGIN
UPDATE CONTRATO
SET
FECHA_VENCIMIENTO = $FECHA_VENCIMIENTO,
CONTRATO = $CONTRATO 
WHERE ID_USUARIO = $ID_USUARIO;
END //
DELIMITER ;


##TRAER LISTADO DE VENTAS EXTERNAS
DROP PROCEDURE IF EXISTS SP_GET_VENTA_EXTERNA;
DELIMITER //
CREATE PROCEDURE `SP_GET_VENTA_EXTERNA`()
BEGIN
SELECT P.ID_PEDIDO,U.CORREO,P.FECHA_LIMITE_O_RETIRO, E.NOMBRE  FROM PEDIDO P 
JOIN ESTADOS E ON P.ID_ESTADO_PEDIDO = E.ID_ESTADO
JOIN USUARIO U ON P.ID_COMPRADOR = U.ID_USUARIO
WHERE P.ID_TIPO_PEDIDO = 2;
END //
DELIMITER ;

#TRAER ESTADOS DE PEDIDOS
DROP PROCEDURE IF EXISTS SP_GET_ESTADOS;
DELIMITER //
CREATE PROCEDURE `SP_GET_ESTADOS`()
BEGIN
SELECT ID_ESTADO,NOMBRE FROM ESTADOS
WHERE NOMBRE IN ('POR APROBAR','PUBLICADO','EN LOGISTICA','DESPACHO','ENTREGADO','RECHAZADO');
END //
DELIMITER ;

#ACTUALIZAR ESTADO DE PEDIDO INTERNACIONAL DESDE PANEL ADMINISTRADOR

DROP PROCEDURE IF EXISTS SP_UPDATE_ESTADO_PEDIDO;
DELIMITER //
CREATE PROCEDURE `SP_UPDATE_ESTADO_PEDIDO` (
$ID_PEDIDO INT(11),
$ID_ESTADO INT(11)
)
BEGIN
    UPDATE PEDIDO 
    SET
    ID_ESTADO_PEDIDO = $ID_ESTADO
    WHERE ID_PEDIDO = $ID_PEDIDO;
END //
DELIMITER ;

#TRAER REPORTES PARA CREAR PDF
DROP PROCEDURE IF EXISTS SP_GET_REPORTES;
DELIMITER //
CREATE PROCEDURE `SP_GET_REPORTES`()
BEGIN
SELECT * FROM HISTORICO_TRANSACCIONES;
END //
DELIMITER ;

#PROCEDIMIENTO PARA CREAR DETALLES DE TRANSPORTISTA
DROP PROCEDURE IF EXISTS SP_CREATE_DETALLE_TRANSPORTISTA;
DELIMITER //
CREATE PROCEDURE `SP_CREATE_DETALLE_TRANSPORTISTA` (
IN $ID_TRANSPORTISTA INT(11),
IN $METODO_VIAJE VARCHAR(3),
IN $REFRIGERADO TINYINT(1),
IN $TON_MAX FLOAT(6,3),
IN $PRECIO_KM FLOAT(6,2),
IN $DESCRIPCION VARCHAR(150)
)
BEGIN
INSERT INTO `maipo_grande`.`detalle_transportista`
	(`ID_TRANSPORTISTA`,
	`METODO_VIAJE`,
    `REFRIGERADO`,
    `TON_MAX`,
    `PRECIO_KM`,
    `DESCRIPCION`)
    VALUES
    ($ID_TRANSPORTISTA,
    $METODO_VIAJE,
    $REFRIGERADO,
    $TON_MAX,
    $PRECIO_KM,
    $DESCRIPCION);
END //
DELIMITER ;


#PROCEDIMIENTO PARA TRAER DATOS DE DETALLES DE TRANSPORTISTA
DROP PROCEDURE IF EXISTS SP_GET_DETALLE_TRANSPORTISTA;
DELIMITER //
CREATE PROCEDURE `SP_GET_DETALLE_TRANSPORTISTA` ()
BEGIN
SELECT ID_DETALLE_TRANSPORTISTA, U.CORREO CORREO, METODO_VIAJE, REFRIGERADO, TON_MAX, PRECIO_KM, DESCRIPCION FROM DETALLE_TRANSPORTISTA DT 
JOIN USUARIO U ON U.ID_USUARIO = DT.ID_TRANSPORTISTA
ORDER BY ID_TRANSPORTISTA;
END //
DELIMITER ;

#PROCEDIMIENTO PARA ELIMINAR DATOS DE DETALLES DE TRANSPORTISTA
DROP PROCEDURE IF EXISTS SP_DELETE_DETALLE_TRANSPORTISTA;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DELETE_DETALLE_TRANSPORTISTA`(
IN $ID_DETALLE_TRANSPORTISTA INT(11)
)
BEGIN
DELETE FROM `maipo_grande`.`detalle_transportista` WHERE ID_DETALLE_TRANSPORTISTA = $ID_DETALLE_TRANSPORTISTA;
END //
DELIMITER;

DROP PROCEDURE IF EXISTS SP_DELETE_DETALLE_TRANSPORTISTA;
DELIMITER //
CREATE PROCEDURE `SP_GET_TRANSPORTISTAS`()
BEGIN
SELECT  ID_USUARIO,U.CORREO FROM USUARIO U JOIN PERFIL P ON U.ID_PERFIL = P.ID_PERFIL WHERE P.NOMBRE = 'Transportista';
END //
DELIMITER;

#PROCEDIMIENTO PARA DECIDIR GANADOR DE POSTULACIONES
DROP PROCEDURE IF EXISTS SP_FINALIZACION_POSTULACION_VENDEDOR;
DELIMITER //
CREATE PROCEDURE SP_FINALIZACION_POSTULACION_VENDEDOR(
IN $ID_PEDIDO INT,
#0:NO HAY POSTULACIONES SUFICIENTES |1: CORRECTO | NULL: ERROR EN EL PROCEDIMIENTO
OUT $RES INT
)
BEGIN
	DECLARE $COUNTER INT;
	DECLARE $TOTAL INT;
    DECLARE $CANT FLOAT(10,3);
    DECLARE $CANT_RECAUDADA FLOAT(10,3);
    DECLARE $CANT_EXTRAIDA FLOAT(10,3);
    DECLARE $ID_POSTULACION INT;
    DECLARE $ID_DETALLE_PEDIDO INT;
    DECLARE $DIFERENCIA FLOAT(10,3);
    DECLARE $PRECIO_EXTRAIDO FLOAT(10,3);
    DECLARE $PRECIO FLOAT(10,3);
    DECLARE $ID_ESTADO_APROBADO INT;
    DECLARE $ID_ESTADO_RECHAZADO INT;
    DECLARE $VALIDADOR INT;
    #SE OBTIENEN LOS ESTADOS DE APROBACION Y RECHAZO DE POSTULACION
    SELECT ID_ESTADO INTO $ID_ESTADO_APROBADO FROM ESTADOS WHERE NOMBRE = 'APROBADA';
    SELECT ID_ESTADO INTO $ID_ESTADO_RECHAZADO FROM ESTADOS WHERE NOMBRE = 'RECHAZADO';
    #SE OBTIENE EL TOTAL DE PRODUCTOS DEL PEDIDO
	SELECT COUNT(*) INTO $TOTAL FROM DETALLE_PEDIDO WHERE ID_PEDIDO = $ID_PEDIDO;
    #SE INICIALIZAN VARIABLES
    SET $CANT_RECAUDADA = 0;
    SET $COUNTER = 1;
    SET $VALIDADOR = 1;
    #SE VALIDA SI EXISTEN POSTULACIONES SUFICIENTES PARA SUPLIR EL PEDIDO
    validarDetalle: LOOP
				IF $COUNTER > $TOTAL THEN 
					LEAVE validarDetalle;
				END IF;
                IF $COUNTER =1 THEN
					SELECT CANT_KG,ID_DETALLE_PEDIDO INTO $CANT,$ID_DETALLE_PEDIDO FROM DETALLE_PEDIDO WHERE ID_PEDIDO = $ID_PEDIDO LIMIT $COUNTER;
				ELSE
					SELECT CANT_KG,ID_DETALLE_PEDIDO INTO $CANT,$ID_DETALLE_PEDIDO FROM DETALLE_PEDIDO WHERE ID_PEDIDO = $ID_PEDIDO LIMIT $COUNTER,1;
				END IF;
				IF (SELECT SUM(KG_APORTADOS) FROM POSTULACION P WHERE ID_DETALLE_PEDIDO = $ID_DETALLE_PEDIDO) < $CANT THEN
					SET $VALIDADOR = 0;
					LEAVE validarDetalle;
				END IF;
                SET $COUNTER = $COUNTER+1;
	END LOOP validarDetalle;

    #SE ENVIA RESPUESTA EN CASO DE NO HABER SUFICIENTES POSTULACIONES
	IF $VALIDADOR = 0 THEN
		SET $RES = 0;
	ELSE
		#SE COMIENZA PROCESO DE ASIGNACION DE POSTULACIONES
		SET $COUNTER = 1;
		insertDetalle: LOOP
			IF $COUNTER > $TOTAL THEN 
				LEAVE insertDetalle;
			END IF;
				IF $COUNTER =1 THEN
					SELECT CANT_KG,ID_DETALLE_PEDIDO INTO $CANT,$ID_DETALLE_PEDIDO FROM DETALLE_PEDIDO WHERE ID_PEDIDO = $ID_PEDIDO LIMIT $COUNTER;
                ELSE
					SELECT CANT_KG,ID_DETALLE_PEDIDO INTO $CANT,$ID_DETALLE_PEDIDO FROM DETALLE_PEDIDO WHERE ID_PEDIDO = $ID_PEDIDO LIMIT $COUNTER,1;
				END IF;
				SELECT KG_APORTADOS,PRECIO,ID_POSTULACION INTO $CANT_EXTRAIDA,$PRECIO_EXTRAIDO,$ID_POSTULACION FROM POSTULACION P JOIN ESTADOS E ON E.ID_ESTADO = P.ID_ESTADO WHERE E.NOMBRE = 'POSTULADO' AND ID_DETALLE_PEDIDO = $ID_DETALLE_PEDIDO ORDER BY PRECIO ASC, KG_APORTADOS DESC LIMIT 1;
				SET $CANT_RECAUDADA = $CANT_RECAUDADA + $CANT_EXTRAIDA;
				SET $PRECIO = $PRECIO+($CANT_EXTRAIDA*$PRECIO_EXTRAIDO);
				IF($CANT_RECAUDADA>= $CANT) THEN
					SET $DIFERENCIA = $CANT_RECAUDADA-$CANT;
					UPDATE `maipo_grande`.`postulacion` SET `KG_APORTADOS` = (KG_APORTADOS-$DIFERENCIA),`ID_ESTADO` = $ID_ESTADO_APROBADO WHERE `ID_POSTULACION` = $ID_POSTULACION;
					UPDATE `maipo_grande`.`detalle_pedido` SET `PRECIO_KG` = $PRECIO WHERE `ID_DETALLE_PEDIDO` = $ID_DETALLE_PEDIDO;
					UPDATE `maipo_grande`.`postulacion` SET `ID_ESTADO` = $ID_ESTADO_RECHAZADO WHERE `ID_DETALLE_PEDIDO` = $ID_DETALLE_PEDIDO  AND `ID_ESTADO` = (SELECT ID_ESTADO FROM ESTADOS WHERE NOMBRE = 'POSTULADO'); 
                    SET $COUNTER = $COUNTER+1;
				ELSE
					UPDATE `maipo_grande`.`postulacion` SET `ID_ESTADO` = $ID_ESTADO_APROBADO WHERE `ID_POSTULACION` = $ID_POSTULACION;
				END IF;
		END LOOP insertDetalle;          
	END IF;
END//
DELIMITER ;